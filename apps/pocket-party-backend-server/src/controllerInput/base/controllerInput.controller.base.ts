/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ControllerInputService } from "../controllerInput.service";
import { ControllerInputCreateInput } from "./ControllerInputCreateInput";
import { ControllerInput } from "./ControllerInput";
import { ControllerInputFindManyArgs } from "./ControllerInputFindManyArgs";
import { ControllerInputWhereUniqueInput } from "./ControllerInputWhereUniqueInput";
import { ControllerInputUpdateInput } from "./ControllerInputUpdateInput";

export class ControllerInputControllerBase {
  constructor(protected readonly service: ControllerInputService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ControllerInput })
  async createControllerInput(
    @common.Body() data: ControllerInputCreateInput
  ): Promise<ControllerInput> {
    return await this.service.createControllerInput({
      data: {
        ...data,

        userAccount: data.userAccount
          ? {
              connect: data.userAccount,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        inputType: true,
        inputValue: true,
        timestamp: true,
        updatedAt: true,

        userAccount: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ControllerInput] })
  @ApiNestedQuery(ControllerInputFindManyArgs)
  async controllerInputs(
    @common.Req() request: Request
  ): Promise<ControllerInput[]> {
    const args = plainToClass(ControllerInputFindManyArgs, request.query);
    return this.service.controllerInputs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        inputType: true,
        inputValue: true,
        timestamp: true,
        updatedAt: true,

        userAccount: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ControllerInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async controllerInput(
    @common.Param() params: ControllerInputWhereUniqueInput
  ): Promise<ControllerInput | null> {
    const result = await this.service.controllerInput({
      where: params,
      select: {
        createdAt: true,
        id: true,
        inputType: true,
        inputValue: true,
        timestamp: true,
        updatedAt: true,

        userAccount: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ControllerInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateControllerInput(
    @common.Param() params: ControllerInputWhereUniqueInput,
    @common.Body() data: ControllerInputUpdateInput
  ): Promise<ControllerInput | null> {
    try {
      return await this.service.updateControllerInput({
        where: params,
        data: {
          ...data,

          userAccount: data.userAccount
            ? {
                connect: data.userAccount,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          inputType: true,
          inputValue: true,
          timestamp: true,
          updatedAt: true,

          userAccount: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ControllerInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteControllerInput(
    @common.Param() params: ControllerInputWhereUniqueInput
  ): Promise<ControllerInput | null> {
    try {
      return await this.service.deleteControllerInput({
        where: params,
        select: {
          createdAt: true,
          id: true,
          inputType: true,
          inputValue: true,
          timestamp: true,
          updatedAt: true,

          userAccount: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
