/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ControllerInput } from "./ControllerInput";
import { ControllerInputCountArgs } from "./ControllerInputCountArgs";
import { ControllerInputFindManyArgs } from "./ControllerInputFindManyArgs";
import { ControllerInputFindUniqueArgs } from "./ControllerInputFindUniqueArgs";
import { CreateControllerInputArgs } from "./CreateControllerInputArgs";
import { UpdateControllerInputArgs } from "./UpdateControllerInputArgs";
import { DeleteControllerInputArgs } from "./DeleteControllerInputArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { ControllerInputService } from "../controllerInput.service";
@graphql.Resolver(() => ControllerInput)
export class ControllerInputResolverBase {
  constructor(protected readonly service: ControllerInputService) {}

  async _controllerInputsMeta(
    @graphql.Args() args: ControllerInputCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ControllerInput])
  async controllerInputs(
    @graphql.Args() args: ControllerInputFindManyArgs
  ): Promise<ControllerInput[]> {
    return this.service.controllerInputs(args);
  }

  @graphql.Query(() => ControllerInput, { nullable: true })
  async controllerInput(
    @graphql.Args() args: ControllerInputFindUniqueArgs
  ): Promise<ControllerInput | null> {
    const result = await this.service.controllerInput(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ControllerInput)
  async createControllerInput(
    @graphql.Args() args: CreateControllerInputArgs
  ): Promise<ControllerInput> {
    return await this.service.createControllerInput({
      ...args,
      data: {
        ...args.data,

        userAccount: args.data.userAccount
          ? {
              connect: args.data.userAccount,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ControllerInput)
  async updateControllerInput(
    @graphql.Args() args: UpdateControllerInputArgs
  ): Promise<ControllerInput | null> {
    try {
      return await this.service.updateControllerInput({
        ...args,
        data: {
          ...args.data,

          userAccount: args.data.userAccount
            ? {
                connect: args.data.userAccount,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ControllerInput)
  async deleteControllerInput(
    @graphql.Args() args: DeleteControllerInputArgs
  ): Promise<ControllerInput | null> {
    try {
      return await this.service.deleteControllerInput(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserAccount, {
    nullable: true,
    name: "userAccount",
  })
  async getUserAccount(
    @graphql.Parent() parent: ControllerInput
  ): Promise<UserAccount | null> {
    const result = await this.service.getUserAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
